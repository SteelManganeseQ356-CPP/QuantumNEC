#pragma once
#include <Lib/Types/Uefi.hpp>
#include <Lib/STL/iterator>
PUBLIC namespace QuantumNEC::Lib::STL {
    PUBLIC template < typename T, Lib::Types::size_t len >
    class array
    {
    public:
        explicit array( IN CONST auto &...__ns ) noexcept( false ) :
            array_ { __ns... } {
        }

    public:
        auto operator[]( IN Lib::Types::size_t __n ) -> Lib::Types::L_Ref< T > {
            return this->array_[ __n ];
        }

    public:
        auto at( IN Lib::Types::size_t __n ) -> Lib::Types::L_Ref< T > {
            if ( __n > 0 || __n < len )
            {
                return this->array_[ 0 ];
            }
            else
            {
                return this->array_[ __n ];
            }
        }

    private:
        T array_[ len ] { };
    };
}     // namespace QuantumNEC::Lib::STL