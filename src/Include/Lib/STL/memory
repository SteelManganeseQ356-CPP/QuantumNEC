#pragma once
#include <Lib/Types/Uefi.hpp>
PUBLIC namespace QuantumNEC::Lib::STL {
    /**
     * @brief 独占资源所有权的指针
     * @tparam T 指针所指类型
     */
    PUBLIC template < typename T >
    class unique_ptr
    {
    public:
        unique_ptr( T *_ptr ) {
            ptr_ = _ptr;
        };
        ~unique_ptr( ) noexcept {
            delete this->ptr_;
        }
        auto operator*( VOID ) CONST->Lib::Types::L_Ref< CONST T > {
            return this->ptr_;
        }
        auto operator->( VOID ) CONST->Lib::Types::Ptr< CONST T > {
            return *this->ptr_;
        }
        auto put( VOID ) CONST->Lib::Types::Ptr< CONST T > {
            return this->ptr_;
        }

    private:
        unique_ptr( unique_ptr< T > CONST &data ) = delete;
        unique_ptr< T > &operator=( unique_ptr< T > CONST &data ) = delete;
        /* 防拷贝 */
    public:
        unique_ptr< T > &operator=( unique_ptr< T > CONST &&data );
    private:
        Lib::Types::Ptr< T > ptr_ { nullptr };
    };
    /**
     * @brief 共享资源所有权的指针
     * @tparam T 指针所指类型
     */
    PUBLIC template < typename T >
    class shared_ptr
    {
    };
    /**
     * @brief 内存分配器
     */
    PUBLIC template < typename T >
    class allocator
    {
    };
}